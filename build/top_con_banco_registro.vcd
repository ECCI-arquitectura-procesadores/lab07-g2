$date
	Wed May 28 19:47:52 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module top_con_banco_registro_tb $end
$var wire 7 ! segU [6:0] $end
$var wire 7 " segD [6:0] $end
$var wire 7 # segC [6:0] $end
$var wire 1 $ negative $end
$var reg 1 % RegWrite $end
$var reg 4 & addrRa [3:0] $end
$var reg 4 ' addrRb [3:0] $end
$var reg 4 ( addrW [3:0] $end
$var reg 1 ) clk $end
$var reg 1 * init $end
$var reg 1 + rst $end
$var reg 2 , selector [1:0] $end
$scope module dut $end
$var wire 1 % RegWrite $end
$var wire 4 - addrRa [3:0] $end
$var wire 4 . addrRb [3:0] $end
$var wire 4 / addrW [3:0] $end
$var wire 1 ) clk $end
$var wire 1 * init $end
$var wire 1 + rst $end
$var wire 7 0 segC [6:0] $end
$var wire 7 1 segD [6:0] $end
$var wire 7 2 segU [6:0] $end
$var wire 2 3 selector [1:0] $end
$var wire 4 4 unidades [3:0] $end
$var wire 7 5 segU_base [6:0] $end
$var wire 7 6 segD_base [6:0] $end
$var wire 7 7 segC_base [6:0] $end
$var wire 8 8 result [7:0] $end
$var wire 1 $ negative $end
$var wire 1 9 done $end
$var wire 4 : decenas [3:0] $end
$var wire 8 ; datOutRb [7:0] $end
$var wire 8 < datOutRa [7:0] $end
$var wire 4 = centenas [3:0] $end
$var reg 7 > segC_mod [6:0] $end
$scope module alu_inst $end
$var wire 4 ? A [3:0] $end
$var wire 4 @ B [3:0] $end
$var wire 1 ) clk $end
$var wire 1 9 done $end
$var wire 1 * init $end
$var wire 8 A result [7:0] $end
$var wire 2 B selector [1:0] $end
$var wire 4 C suma_resta_e [3:0] $end
$var wire 8 D mult_out [7:0] $end
$var wire 1 E mult_done $end
$var wire 1 F co4 $end
$var reg 1 9 alu_done $end
$var reg 8 G alu_result [7:0] $end
$var reg 1 $ negative $end
$var reg 4 H resta_val_abs [3:0] $end
$scope module mult_inst $end
$var wire 4 I MD [3:0] $end
$var wire 4 J MR [3:0] $end
$var wire 1 ) clk $end
$var wire 1 K init $end
$var wire 1 L z $end
$var parameter 32 M ADD $end
$var parameter 32 N CHECK $end
$var parameter 32 O END1 $end
$var parameter 32 P SHIFT $end
$var parameter 32 Q START $end
$var reg 8 R A [7:0] $end
$var reg 4 S B [3:0] $end
$var reg 1 T add $end
$var reg 1 E done $end
$var reg 8 U pp [7:0] $end
$var reg 1 V rst $end
$var reg 1 W sh $end
$var reg 3 X status [2:0] $end
$upscope $end
$scope module sr_inst $end
$var wire 1 Y Selector $end
$var wire 4 Z a [3:0] $end
$var wire 4 [ b [3:0] $end
$var wire 1 \ xor0 $end
$var wire 1 ] xor1 $end
$var wire 1 ^ xor2 $end
$var wire 1 _ xor3 $end
$var wire 4 ` xorB [3:0] $end
$var wire 4 a e [3:0] $end
$var wire 1 F co4 $end
$scope module sumador_1bit $end
$var wire 4 b a [3:0] $end
$var wire 4 c b [3:0] $end
$var wire 1 Y ci $end
$var wire 4 d e [3:0] $end
$var wire 1 F co4 $end
$var wire 1 e co3 $end
$var wire 1 f co2 $end
$var wire 1 g co1 $end
$scope module sumador1 $end
$var wire 1 h a $end
$var wire 1 i aband $end
$var wire 1 j abxor $end
$var wire 1 k b $end
$var wire 1 Y ci $end
$var wire 1 l cixor $end
$var wire 1 g co $end
$var wire 1 m e $end
$upscope $end
$scope module sumador2 $end
$var wire 1 n a $end
$var wire 1 o aband $end
$var wire 1 p abxor $end
$var wire 1 q b $end
$var wire 1 g ci $end
$var wire 1 r cixor $end
$var wire 1 f co $end
$var wire 1 s e $end
$upscope $end
$scope module sumador3 $end
$var wire 1 t a $end
$var wire 1 u aband $end
$var wire 1 v abxor $end
$var wire 1 w b $end
$var wire 1 f ci $end
$var wire 1 x cixor $end
$var wire 1 e co $end
$var wire 1 y e $end
$upscope $end
$scope module sumador4 $end
$var wire 1 z a $end
$var wire 1 { aband $end
$var wire 1 | abxor $end
$var wire 1 } b $end
$var wire 1 e ci $end
$var wire 1 ~ cixor $end
$var wire 1 F co $end
$var wire 1 !" e $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module banco $end
$var wire 1 "" RegWrite $end
$var wire 4 #" addrRa [3:0] $end
$var wire 4 $" addrRb [3:0] $end
$var wire 4 %" addrW [3:0] $end
$var wire 1 ) clk $end
$var wire 8 &" datOutRa [7:0] $end
$var wire 8 '" datOutRb [7:0] $end
$var wire 8 (" datW [7:0] $end
$var wire 1 + rst $end
$var parameter 32 )" BIT_ADDR $end
$var parameter 32 *" BIT_DATO $end
$var parameter 32 +" NREG $end
$upscope $end
$scope module decC $end
$var wire 4 ," digit [3:0] $end
$var reg 7 -" seg [6:0] $end
$upscope $end
$scope module decD $end
$var wire 4 ." digit [3:0] $end
$var reg 7 /" seg [6:0] $end
$upscope $end
$scope module decU $end
$var wire 4 0" digit [3:0] $end
$var reg 7 1" seg [6:0] $end
$upscope $end
$scope module mux_inst $end
$var wire 1 9 done $end
$var wire 1 $ negative $end
$var wire 8 2" sumtotal [7:0] $end
$var wire 4 3" unidades [3:0] $end
$var wire 4 4" decenas [3:0] $end
$var wire 4 5" centenas [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000 +"
b1000 *"
b100 )"
b0 Q
b11 P
b100 O
b1 N
b10 M
$end
#0
$dumpvars
b0 5"
b0 4"
b0 3"
b0 2"
b1000000 1"
b0 0"
b1000000 /"
b0 ."
b1000000 -"
b0 ,"
b0 ("
bx '"
bx &"
bx %"
bx $"
bx #"
0""
x!"
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
bx d
bx c
bx b
bx a
bx `
x_
x^
x]
x\
bx [
bx Z
xY
b0 X
0W
0V
b0 U
0T
b0 S
b0 R
1L
0K
bx J
bx I
bx H
b0 G
xF
0E
b0 D
bx C
bx B
b0 A
bx @
bx ?
b1000000 >
b0 =
bx <
bx ;
b0 :
09
b0 8
b1000000 7
b1000000 6
b1000000 5
b0 4
bx 3
b1000000 2
b1000000 1
b1000000 0
bx /
bx .
bx -
bx ,
1+
0*
0)
bx (
bx '
bx &
0%
0$
b1000000 #
b1000000 "
b1000000 !
$end
#5000
1)
#10000
0y
0f
0!"
1s
0r
0e
0F
b1000000 #
b1000000 0
b1000000 >
b11 C
b11 a
b11 d
1m
0g
0x
0~
b110000 !
b110000 2
b110000 5
b110000 1"
b1000000 "
b1000000 1
b1000000 6
b1000000 /"
b1000000 7
b1000000 -"
1j
0i
1p
0v
0|
b11 4
b11 0"
b11 3"
b0 :
b0 ."
b0 4"
b0 =
b0 ,"
b0 5"
0k
1q
0w
0}
0o
0u
0{
0\
1]
0^
b10 `
b10 c
0_
0l
1h
0n
0t
0z
19
b11 8
b11 A
b11 G
b11 ("
b11 2"
0Y
b10 @
b10 J
b10 [
b1 ?
b1 I
b1 Z
b1 b
0)
1*
b0 ,
b0 3
b0 B
b11 (
b11 /
b11 %"
b10 ;
b10 '"
b10 '
b10 .
b10 $"
b1 <
b1 &"
b1 &
b1 -
b1 #"
0+
#15000
b1111000 !
b1111000 2
b1111000 5
b1111000 1"
b100100 "
b100100 1
b100100 6
b100100 /"
b111 4
b111 0"
b111 3"
b10 :
b10 ."
b10 4"
1F
1e
1u
1{
0x
1k
0q
1w
1}
1m
1s
0f
0y
b1011 C
b1011 a
b1011 d
1!"
1\
0]
1^
b1101 `
b1101 c
1_
1j
1p
0o
0v
0|
0h
1n
1t
1z
b11011 8
b11011 A
b11011 G
b11011 ("
b11011 2"
19
b1101 @
b1101 J
b1101 [
b1110 ?
b1110 I
b1110 Z
b1110 b
b1101 ;
b1101 '"
b1110 <
b1110 &"
1)
#20000
1""
0)
1%
0*
#25000
1)
#30000
0)
#35000
1)
#40000
0""
0)
0%
#45000
1)
#50000
0)
#55000
1)
#60000
0)
#65000
1)
#70000
0)
#75000
1)
#80000
0)
#85000
1)
#90000
0)
